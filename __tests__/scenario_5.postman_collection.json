{
	"info": {
		"_postman_id": "e8e66751-26e4-49a2-a0cc-fa035ca7ca2b",
		"name": "scenario_5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7261725"
	},
	"item": [
		{
			"name": "#1.1 New User Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login Succeeded\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cookies are correctly set\", function () {",
							"    pm.expect(pm.cookies.has(\"logged_in\"));",
							"});",
							"",
							"postman.setNextRequest(\"#1.2 Login\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const jar = pm.cookies.jar();\r",
							"\r",
							"jar.clear(pm.environment.get(\"baseUrl\"), function (error) {\r",
							"    console.log(\"Error clearing cookies: \", error);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"scenario_5_user\",\n    \"password\": \"password\",\n    \"email\": \"new_user@gmail.com\",\n    \"firstName\": \"New\",\n    \"lastName\": \"User\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "#1.2 Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login Succeeded\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cookies are correctly set\", function () {",
							"    pm.expect(pm.cookies.has(\"logged_in\"));",
							"});",
							"",
							"postman.setNextRequest(\"#2 Get customer Id\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// cleanup all cookies from previous run",
							"const jar = pm.cookies.jar();",
							"jar.clear(pm.request.url, function (error) {",
							"    if(error) {",
							"        console.error(error);",
							"    } else {",
							"        console.log(\"Successful pre test cleanup.\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "scenario_5_user",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "#2 Get customer Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Fetch customer information\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    pm.environment.set(\"customer_id\", response.id);",
							"});",
							"",
							"postman.setNextRequest(\"#3 Validate empty cart\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/customers/scenario_5_user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customers",
						"scenario_5_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "#3 Validate empty cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate cart content\", function () {",
							"    pm.response.to.have.status(200);",
							"    const response = pm.response.json();",
							"    // ensure empty cart",
							"    pm.expect(response.length).to.be.eql(0);",
							"});",
							"",
							"postman.setNextRequest(\"#4 Get current orders\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cart",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "#4 Get current orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get current orders\", function () {",
							"    // This is a bug, ideally GET request should return status code 200",
							"    pm.response.to.have.status(201);",
							"    pm.environment.set(\"order_count\", pm.response.json().length);",
							"});",
							"",
							"postman.setNextRequest(\"#5 Place order with no items in cart\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "#5 Place order with no items in cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate cart content\", function () {",
							"    pm.response.to.have.status(406);",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.error).to.eql('Not Acceptable');",
							"    pm.expect(responseJson.message).to.eql('Invalid order request. Order requires customer, address, card and items.');",
							"});",
							"",
							"postman.setNextRequest(\"#8 Validate Order\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "#6 Validate Order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate cart content\", function () {",
							"    pm.response.to.have.status(200);",
							"    const oldOrderCount = pm.environment.get(\"order_count\");",
							"    const currentOrderCount = pm.response.json()._embedded.customerOrders.length;",
							"    // No new orders were created as payment was declined",
							"    pm.expect(currentOrderCount).to.be.eq(Number(oldOrderCount));",
							"});",
							"",
							"postman.setNextRequest(\"#9 Empty Cart and Cleanup\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/search/customerId?sort=date&custId={{customer_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"search",
						"customerId"
					],
					"query": [
						{
							"key": "sort",
							"value": "date"
						},
						{
							"key": "custId",
							"value": "{{customer_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "#7 Empty Cart and Cleanup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Cleanup\", function () {",
							"    pm.response.to.have.status(202);",
							"    const jar = pm.cookies.jar();",
							"",
							"    jar.clear(pm.request.url, function (error) {",
							"        if(error) {",
							"            console.error(error);",
							"        } else {",
							"            console.log(\"Successful post test cleanup.\");",
							"        }",
							"    });",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cart",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}